#!/bin/bash

get_script_dir () {
    pushd $(dirname "${BASH_SOURCE[0]}") >/dev/null
    pwd
    popd >/dev/null
}

THIS_DIR="$(get_script_dir)"
BASE_DIR="$(dirname "$THIS_DIR")"
BASE_NAME="$(basename "$BASE_DIR")"
base_name="$(echo $BASE_NAME | tr ' [:upper:]' '_[:lower:]')"

if ! which docker > /dev/null
then
    echo "you must install docker..."
    exit 1
fi

(cd "$BASE_DIR/dockers" && docker build --build-arg DEBIAN_SUITE="${DEBIAN_SUITE:-bookworm}" --build-arg TL_PACKAGES="${TL_PACKAGES:-texlive-full asymptote latexmk xindy}" -t "$base_name/latex-base:latest" latex-base)

if [ ! -f "$BASE_DIR/dockers/latex/Dockerfile" ] ; then
    echo "Creating a default (full texlive install) Dockerfile in $BASE_DIR/dockers/latex"
    echo "Edit this file before running $BASE_DIR/bin/latex-docker-setup if you want a custom setup."
    mkdir -p "$BASE_DIR/dockers/latex"
    cat >"$BASE_DIR/dockers/latex/Dockerfile" <<EOF
FROM "$base_name/latex-base:latest"
#
# You can activate / nullify multiline RUN lines by using 'echo skip ||' or 'echo run &&' at the start.
#
#    # enabled
#    RUN echo <msg> run && ( \\
#        cmd0 && \\
#        cmd1 && \\
#        cmd2 )
#
#    # disabled
#    RUN echo <msg> skip || ( \\
#        cmd0 && \\
#        cmd1 && \\
#        cmd2 )
#
#    This format makes it easier to manage what parts of a dockerfile are run.
#

RUN echo full texlive install run && (\\
    apt-get update && \\
    apt-get install -y --no-install-recommends \\
      texlive-full \\
      && \\
    apt-get clean && \\
    rm -rf /var/lib/apt/lists/* )

RUN echo tufte latex install skip || (\\
    apt-get update && \\
    apt-get install -y --no-install-recommends \\
        texlive-fonts-extra \\
        texlive-fonts-recommended \\
        texlive-latex-base \\
        texlive-latex-extra \\
        texlive-latex-recommended \\
        texlive-plain-generic \\
        texlive-science \\
        && \\
        apt-get clean && \\
        rm -rf /var/lib/apt/lists/* )
EOF
fi
